import { createCorsResponse } from '../utils/cors.ts'
import { logger, analytics } from '../utils/logger.ts'

export const oauthController = {
  async exchangeCodeForTokens(code: string): Promise<any> {
    try {
      logger.info(`Exchanging OAuth code: ${code.substring(0, 10)}...`)
      
      const { goHighLevelService } = await import("../services/goHighLevelService.ts")
      const result = await goHighLevelService.exchangeCodeForTokens(code)
      
      // The service now returns a structured response with success/error
      if (result.success) {
        logger.info('✅ OAuth token exchange successful')
        analytics.trackEvent('oauth_success', { 
          expires_in: result.data.expires_in,
          token_type: result.data.token_type 
        })
        
        return {
          success: true,
          tokens: result.data,
          message: result.message
        }
      } else {
        logger.error('❌ OAuth token exchange failed:', result.error)
        analytics.trackEvent('oauth_error', { error: result.error })
        
        throw new Error(result.error || 'OAuth token exchange failed')
      }
    } catch (error) {
      logger.error("OAuth exchange error:", error)
      analytics.trackEvent('oauth_exception', { error: error.message })
      throw new Error(`Failed to exchange OAuth code: ${error.message}`)
    }
  },
  
  async handleOAuth(req: Request, path: string): Promise<Response> {
    const startTime = Date.now()
    const method = req.method

    try {
      logger.info('OAuth handling not yet implemented')
      
      const response = {
        success: false,
        error: 'OAuth route not yet implemented',
        message: 'This route is being migrated from Express to Edge Function',
        timestamp: new Date().toISOString()
      }

      const duration = Date.now() - startTime
      analytics.trackRequest(method, path, 501, duration)
      
      return createCorsResponse(response, 501)
    } catch (error) {
      logger.error('Error in OAuth controller:', error)
      
      const duration = Date.now() - startTime
      analytics.trackRequest(method, path, 500, duration)
      
      return createCorsResponse({
        success: false,
        error: 'Internal server error',
        message: error.message,
        timestamp: new Date().toISOString()
      }, 500)
    }
  }
}
