@startuml AI Community Member & Monitoring System Sequence
!theme plain
skinparam backgroundColor #FFFFFF

title AI Community Member & Monitoring System Sequence\nSupabase Edge Functions Backend

actor U as "User <<Community Member>>"
participant Frontend as "Frontend\n(React/Vue)"
participant Gateway as "API Gateway\n(index.ts)"
participant AIRoutes as "AI Community\nMember Routes"
participant AIController as "AI Community\nMember Controller"
participant AIService as "AI Community\nMember Service"
participant MonitorService as "AI Monitoring\nService"
participant TrendingService as "Trending Topics\nService"
participant QuestionsDB as "Questions\nDatabase Service"
participant AnswersDB as "Answers\nDatabase Service"
participant UsersDB as "Users\nDatabase Service"
participant AIDB as "AI Services\nDatabase Service"
participant AnalyticsMW as "Analytics\nMiddleware"
participant Logger as "Logger\nUtilities"
database DB as "Supabase Database\n(Questions, Answers, Users, AI Personas, Learning Memory, Trending Topics, Analytics)"

' AI Community Member Stats Request
U ->> Frontend : Request AI Stats
Frontend ->> Gateway : GET /api/ai-community-member/stats
Gateway ->> AIRoutes : Route AI Request
AIRoutes ->> AnalyticsMW : Track Request
AnalyticsMW -->> AIRoutes : Analytics Processed
AIRoutes ->> AIController : Process AI Request
AIController ->> AIService : Get Stats
AIService ->> MonitorService : getStats()
MonitorService ->> TrendingService : getTrendingTopicsForStats()
TrendingService ->> DB : SELECT * FROM trending_topics
DB -->> TrendingService : trending topics data
TrendingService -->> MonitorService : trending topics
MonitorService -->> AIService : monitoring stats
AIService -->> AIController : stats data
AIController -->> AIRoutes : stats response
AIRoutes -->> Gateway : 200 OK {stats}
Gateway -->> Frontend : AI Community Member Stats
Frontend -->> U : Display Stats Dashboard

' AI Personas Request
U ->> Frontend : Request AI Personas
Frontend ->> Gateway : GET /api/ai-community-member/personas
Gateway ->> AIRoutes : Route AI Request
AIRoutes ->> AnalyticsMW : Track Request
AnalyticsMW -->> AIRoutes : Analytics Processed
AIRoutes ->> AIController : Process AI Request
AIController ->> AIService : Get Personas
AIService ->> AIDB : getAIPersonas()
AIDB ->> DB : SELECT * FROM ai_personas
DB -->> AIDB : personas data
AIDB -->> AIService : personas list
AIService -->> AIController : personas data
AIController -->> AIRoutes : personas response
AIRoutes -->> Gateway : 200 OK {personas}
Gateway -->> Frontend : AI Personas List
Frontend -->> U : Display AI Personas\n(Alex Chen, Maya Rodriguez, Jordan Kim, Sam Taylor)

' Trending Topics Request
U ->> Frontend : Request Trending Topics
Frontend ->> Gateway : GET /api/ai-community-member/trending-topics
Gateway ->> AIRoutes : Route AI Request
AIRoutes ->> AnalyticsMW : Track Request
AnalyticsMW -->> AIRoutes : Analytics Processed
AIRoutes ->> AIController : Process AI Request
AIController ->> TrendingService : getTrendingTopics(10)
TrendingService ->> DB : SELECT * FROM trending_topics ORDER BY frequency DESC
DB -->> TrendingService : trending topics data
TrendingService -->> AIController : trending topics
AIController -->> AIRoutes : trending topics response
AIRoutes -->> Gateway : 200 OK {trending_topics}
Gateway -->> Frontend : Trending Topics Data
Frontend -->> U : Display Trending Topics

' AI Response Generation Flow
U ->> Frontend : Submit Question
Frontend ->> Gateway : POST /api/questions (questionData)
Gateway ->> AIRoutes : Route Question Request
AIRoutes ->> AnalyticsMW : Track Request
AnalyticsMW -->> AIRoutes : Analytics Processed
AIRoutes ->> AIController : Process Question
AIController ->> QuestionsDB : createQuestion(questionData)
QuestionsDB ->> DB : INSERT INTO questions
DB -->> QuestionsDB : questionId created
QuestionsDB -->> AIController : question created

' AI Response Generation
AIController ->> AIService : generateResponse(question)
AIService ->> AIService : analyzeQuestion(questionData)
AIService ->> AIService : selectPersona(context)
AIService ->> AIService : generateAIResponse(persona, question)
AIService ->> AnswersDB : createAnswer(aiResponse)
AnswersDB ->> DB : INSERT INTO answers (is_ai: true)
DB -->> AnswersDB : answerId created
AnswersDB -->> AIService : answer created
AIService -->> AIController : AI response generated
AIController -->> AIRoutes : response with questionId and answerId
AIRoutes -->> Gateway : 201 Created {questionId, answerId}
Gateway -->> Frontend : Question Created with AI Response
Frontend -->> U : Show Question with AI Answer

' Proactive Engagement Generation
U ->> Frontend : Request Proactive Engagement
Frontend ->> Gateway : POST /api/ai-community-member/proactive-engagement
Gateway ->> AIRoutes : Route AI Request
AIRoutes ->> AnalyticsMW : Track Request
AnalyticsMW -->> AIRoutes : Analytics Processed
AIRoutes ->> AIController : Process AI Request
AIController ->> AIService : generateProactiveEngagement()
AIService ->> AIService : analyzeCommunityTrends()
AIService ->> TrendingService : getTrendingTopics()
TrendingService ->> DB : SELECT * FROM trending_topics
DB -->> TrendingService : trending data
TrendingService -->> AIService : trending topics
AIService ->> AIService : selectEngagementStrategy()
AIService ->> AIService : generateEngagementContent()
AIService -->> AIController : engagement content
AIController -->> AIRoutes : engagement response
AIRoutes -->> Gateway : 200 OK {engagement}
Gateway -->> Frontend : Proactive Engagement Content
Frontend -->> U : Display AI Engagement

' Start Monitoring Request
U ->> Frontend : Start AI Monitoring
Frontend ->> Gateway : POST /api/ai-community-member/monitor
Gateway ->> AIRoutes : Route AI Request
AIRoutes ->> AnalyticsMW : Track Request
AnalyticsMW -->> AIRoutes : Analytics Processed
AIRoutes ->> AIController : Process AI Request
AIController ->> MonitorService : start()
MonitorService ->> MonitorService : startProactiveEngagementLoop()
MonitorService ->> MonitorService : startCommunityAnalysisLoop()
MonitorService ->> TrendingService : analyzeCommunityTrends()
TrendingService ->> DB : SELECT questions, tags, content FROM questions
DB -->> TrendingService : questions data
TrendingService ->> TrendingService : analyzeTopicFrequency()
TrendingService ->> TrendingService : analyzeSentiment()
TrendingService ->> DB : INSERT/UPDATE trending_topics
DB -->> TrendingService : trends updated
TrendingService -->> MonitorService : analysis complete
MonitorService -->> AIController : monitoring started
AIController -->> AIRoutes : monitoring response
AIRoutes -->> Gateway : 200 OK {monitoring started}
Gateway -->> Frontend : Monitoring Started
Frontend -->> U : AI Monitoring Active

' Background Monitoring Loop (Proactive Engagement)
loop Every 30 minutes
    MonitorService ->> QuestionsDB : findUnansweredQuestions()
    QuestionsDB ->> DB : SELECT * FROM questions WHERE is_answered = false
    DB -->> QuestionsDB : unanswered questions
    QuestionsDB -->> MonitorService : questions list
    
    MonitorService ->> MonitorService : analyzeEngagementOpportunities()
    MonitorService ->> AIService : generateProactiveEngagement()
    AIService ->> AIService : selectPersonaForEngagement()
    AIService ->> AIService : generateEngagementContent()
    AIService -->> MonitorService : engagement content
    
    MonitorService ->> AnswersDB : createAnswer(engagement)
    AnswersDB ->> DB : INSERT INTO answers (is_ai: true, proactive: true)
    DB -->> AnswersDB : answerId created
    AnswersDB -->> MonitorService : engagement posted
    
    MonitorService ->> AnalyticsMW : trackEvent('proactive_engagement_posted')
end

' Background Monitoring Loop (Community Analysis)
loop Every 60 minutes
    MonitorService ->> TrendingService : analyzeCommunityTrends()
    TrendingService ->> DB : SELECT questions, tags, content FROM questions WHERE created_at > NOW() - INTERVAL '1 hour'
    DB -->> TrendingService : recent questions
    TrendingService ->> TrendingService : calculateTopicFrequency()
    TrendingService ->> TrendingService : analyzeSentiment()
    TrendingService ->> TrendingService : identifyTrendingTopics()
    TrendingService ->> DB : UPSERT trending_topics
    DB -->> TrendingService : trends updated
    TrendingService -->> MonitorService : analysis complete
    
    MonitorService ->> MonitorService : updateCommunityHealth()
    MonitorService ->> DB : UPDATE monitoring_stats
    DB -->> MonitorService : stats updated
end

' Analytics Tracking
Frontend ->> AnalyticsMW : trackEvent('ai_community_member_interaction')
AnalyticsMW ->> DB : INSERT INTO analytics_events
DB -->> AnalyticsMW : event tracked
AnalyticsMW -->> Frontend : analytics processed

' Error Handling
alt Error in AI Service
    AIService ->> Logger : logError(error)
    Logger ->> DB : INSERT INTO error_logs
    AIService -->> AIController : error response
    AIController -->> AIRoutes : 500 Internal Server Error
    AIRoutes -->> Gateway : error response
    Gateway -->> Frontend : error message
    Frontend -->> U : Show error message
end

' Session Management
Frontend ->> UsersDB : getCurrentUser()
UsersDB ->> DB : SELECT * FROM users WHERE id = current_user_id
DB -->> UsersDB : user data
UsersDB -->> Frontend : user information
Frontend ->> Frontend : updateUserState()

note right of MonitorService
  **Monitoring Configuration:**
  - Proactive Engagement: 30 min intervals
  - Community Analysis: 60 min intervals
  - Max Engagements: 5 per hour
  - Active Personas: 4 AI personas
  - Engagement Types: question, prototype_share, 
    learning_update, community_tip, 
    collaboration_request
end note

note right of AIService
  **AI Community Member Features:**
  - Response Generation
  - Proactive Engagement
  - Persona Selection
  - Learning Memory
  - Community Analysis
end note

note right of TrendingService
  **Trending Topics Analysis:**
  - Sentiment Analysis
  - Frequency Tracking
  - Related Questions
  - Community Health Metrics
end note

@enduml
