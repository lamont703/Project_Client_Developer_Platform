@startuml AI Community Member & Monitoring System Sequence
actor U as "User <<Community Member>>"
participant FE as "Frontend\n(React/Vue)"
participant API as "API Gateway\n(index.ts)"
participant AIR as "AI Community\nMember Routes"
participant MR as "Monitoring\nRoutes"
participant AR as "Analytics\nRoutes"
participant DR as "Debug\nRoutes"
participant AIC as "AI Community\nMember Controller"
participant MC as "Monitoring\nController"
participant AC as "Analytics\nController"
participant AIS as "AI Community\nMember Service"
participant MS as "AI Monitoring\nService"
participant TS as "Trending Topics\nService"
participant AS as "Analytics\nService"
participant QS as "Questions\nService"
participant ANS as "Answers\nService"
participant US as "Users\nService"
participant AIDB as "AI Services\nDatabase"
database DB as "Supabase\nDatabase"
participant AI as "AI Personas\n(Alex, Maya, Jordan, Sam)"
participant EXT as "External APIs\n(Analytics, AI)"

' User requests AI Community Member stats
U ->> FE : View AI Community Stats
FE ->> API : GET /api/ai-community-member/stats
API ->> AIR : Route to AI Community Member
AIR ->> AIC : getStats()
AIC ->> MS : getStats()
MS ->> TS : getTrendingTopicsForStats()
TS ->> DB : SELECT FROM trending_topics
DB -->> TS : trending topics data
TS -->> MS : trending topics
MS -->> AIC : monitoring stats
AIC -->> AIR : stats response
AIR -->> API : 200 OK {stats}
API -->> FE : AI Community stats
FE ->> U : Display AI stats dashboard

' User requests AI personas
U ->> FE : View AI Personas
FE ->> API : GET /api/ai-community-member/personas
API ->> AIR : Route to AI Community Member
AIR ->> AIC : testPersonas()
AIC ->> AIS : getPersonas()
AIS ->> AIDB : getAIPersonas()
AIDB ->> DB : SELECT FROM ai_personas
DB -->> AIDB : personas data
AIDB -->> AIS : personas list
AIS -->> AIC : personas response
AIC -->> AIR : personas data
AIR -->> API : 200 OK {personas}
API -->> FE : AI personas list
FE ->> U : Display AI personas (Alex, Maya, Jordan, Sam)

' User requests trending topics
U ->> FE : View Trending Topics
FE ->> API : GET /api/ai-community-member/trending-topics
API ->> AIR : Route to AI Community Member
AIR ->> AIC : getTrendingTopics()
AIC ->> TS : getTrendingTopics(10)
TS ->> DB : SELECT FROM trending_topics ORDER BY frequency
DB -->> TS : trending topics
TS -->> AIC : trending topics list
AIC -->> AIR : trending topics response
AIR -->> API : 200 OK {trending_topics}
API -->> FE : trending topics data
FE ->> U : Display trending topics

' User generates AI response
U ->> FE : Generate AI Response for Question
FE ->> API : POST /api/ai-community-member/generate-response
API ->> AIR : Route to AI Community Member
AIR ->> AIC : generateResponse(req)
AIC ->> QS : getQuestionById(questionId)
QS ->> DB : SELECT FROM questions WHERE id = questionId
DB -->> QS : question data
QS -->> AIC : question object
AIC ->> AIS : generateResponse(question, context)
AIS ->> AI : selectPersona(context)
AI -->> AIS : selected persona (Alex/Maya/Jordan/Sam)
AIS ->> EXT : AI processing request
EXT -->> AIS : AI response generated
AIS -->> AIC : AI response object
AIC ->> ANS : createAnswer(answerData)
ANS ->> DB : INSERT INTO answers
DB -->> ANS : answerId created
ANS -->> AIC : created answer
AIC -->> AIR : success response
AIR -->> API : 200 OK {answer, aiResponse}
API -->> FE : AI response generated
FE ->> U : Display AI response

' User starts monitoring
U ->> FE : Start AI Monitoring
FE ->> API : POST /api/ai-community-member/monitor
API ->> AIR : Route to AI Community Member
AIR ->> AIC : startMonitoring()
AIC ->> MS : start()
MS ->> MS : startProactiveEngagementLoop()
MS ->> MS : startCommunityAnalysisLoop()
MS ->> TS : analyzeCommunityTrends()
TS ->> DB : SELECT FROM questions WHERE created_at > last_analysis
DB -->> TS : recent questions
TS ->> TS : analyzeSentiment(questions)
TS ->> TS : calculateTopicFrequency()
TS ->> DB : INSERT/UPDATE trending_topics
DB -->> TS : trends updated
TS -->> MS : community trends
MS -->> AIC : monitoring started
AIC -->> AIR : success response
AIR -->> API : 200 OK {message: "AI monitoring started"}
API -->> FE : monitoring status
FE ->> U : Show monitoring active

' Background monitoring processes
loop Every 30 minutes - Proactive Engagement
    MS ->> MS : checkEngagementOpportunities()
    MS ->> QS : findUnansweredQuestions()
    QS ->> DB : SELECT FROM questions WHERE is_answered = false
    DB -->> QS : unanswered questions
    QS -->> MS : questions list
    MS ->> AIS : generateProactiveEngagement()
    AIS ->> AI : selectPersonaForQuestion(question)
    AI -->> AIS : selected persona
    AIS ->> EXT : generateEngagementContent()
    EXT -->> AIS : engagement content
    AIS ->> ANS : createAnswer(engagementData)
    ANS ->> DB : INSERT INTO answers
    DB -->> ANS : answerId created
    MS ->> AS : trackEvent('proactive_engagement')
    AS ->> DB : INSERT INTO analytics_events
end

loop Every 60 minutes - Community Analysis
    MS ->> TS : analyzeCommunityTrends()
    TS ->> DB : SELECT FROM questions WHERE created_at > last_analysis
    DB -->> TS : recent questions
    TS ->> TS : extractTopicsFromQuestions()
    TS ->> TS : calculateSentimentScores()
    TS ->> TS : identifyTrendingTopics()
    TS ->> DB : UPDATE trending_topics
    DB -->> TS : trends updated
    MS ->> MS : updateCommunityHealth()
    MS ->> AS : trackEvent('community_analysis')
    AS ->> DB : INSERT INTO analytics_events
end

' User requests analytics
U ->> FE : View Analytics Dashboard
FE ->> API : GET /api/analytics/summary
API ->> AR : Route to Analytics
AR ->> AC : getSummary()
AC ->> AS : getAnalyticsSummary(period)
AS ->> DB : SELECT FROM analytics_events WHERE created_at > period
DB -->> AS : analytics data
AS ->> AS : calculateSummaryMetrics()
AS -->> AC : summary metrics
AC -->> AR : analytics summary
AR -->> API : 200 OK {summary}
API -->> FE : analytics data
FE ->> U : Display analytics dashboard

' User requests analytics events
U ->> FE : View Analytics Events
FE ->> API : GET /api/analytics/events
API ->> AR : Route to Analytics
AR ->> AC : getEvents()
AC ->> AS : getAnalyticsEvents(filters)
AS ->> DB : SELECT FROM analytics_events WHERE filters
DB -->> AS : events data
AS -->> AC : events list
AC -->> AR : events response
AR -->> API : 200 OK {events}
API -->> FE : analytics events
FE ->> U : Display analytics events

' Debug operations
U ->> FE : Debug System Status
FE ->> API : GET /api/debug/ai-community-member/stats
API ->> DR : Route to Debug
DR ->> AIC : getStats()
AIC ->> MS : getStats()
MS ->> TS : getTrendingTopicsForStats()
TS ->> DB : SELECT FROM trending_topics
DB -->> TS : trending topics
TS -->> MS : trending data
MS -->> AIC : debug stats
AIC -->> DR : debug response
DR -->> API : 200 OK {debug_stats}
API -->> FE : debug information
FE ->> U : Display debug status

' AI Persona interactions
note over AI
  **AI Personas Available:**
  - Alex Chen: React, Figma, User Research
  - Maya Rodriguez: Design Systems, Figma, User Testing
  - Jordan Kim: JavaScript, React, Node.js
  - Sam Taylor: Product Strategy, User Research, Analytics
end note

' Monitoring configuration
note over MS
  **Monitoring Configuration:**
  - Proactive Engagement: 30 min intervals
  - Community Analysis: 60 min intervals
  - Max Engagements: 5 per hour
  - Active Personas: 4 AI personas
  - Engagement Types: question, prototype_share, 
    learning_update, community_tip, 
    collaboration_request
end note

' Database tables
note over DB
  **Database Tables:**
  - questions: User and AI questions
  - answers: User and AI responses
  - users: User management
  - ai_personas: AI persona configurations
  - ai_learning_memory: Learning history
  - trending_topics: Community trends
  - analytics_events: Event tracking
  - ai_assistant_sessions: Session management
end note

@enduml
