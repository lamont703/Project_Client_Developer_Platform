@startuml
actor U as "User <<Client>>"
participant JL as "JobListing\n(React Component)"
participant API as "Backend Server\n(Express.js)"
participant ROUTES as "Routes\n(/api/opportunities)"
participant CONTROLLER as "Controllers\n(opportunityController)"
participant DB as "Database\n(Supabase)"
control ANA as "Analytics\n(middleware)"
participant GHL as "GoHighLevel\nService"
participant WEBHOOK as "Webhook Handler\n(/api/webhooks)"
participant LS as "Local Storage\n(cache, state)"

' Session start - User opens Job Listing page
U ->> JL : Open Job Listing page
JL ->> ANA : trackEvent('job_listing_opened')
JL ->> LS : checkCachedOpportunities()
LS -->> JL : cached data (if any)

' Initial data loading
JL ->> JL : setLoading(true)
JL ->> API : GET /api/opportunities

' Backend Server Flow
API ->> ANA : analytics middleware\n(opportunities_requested)
ANA -->> API : analytics processed

API ->> ROUTES : route to /api/opportunities
ROUTES ->> CONTROLLER : getAllOpportunitiesController()

' Database Operations
CONTROLLER ->> DB : getAllOpportunities()
DB ->> DB : SELECT * FROM ghl_opportunities\nORDER BY created_at DESC
DB -->> CONTROLLER : opportunities data

' Data Processing
CONTROLLER ->> CONTROLLER : filterOpenOpportunities(opportunities)
CONTROLLER ->> CONTROLLER : formatOpportunitiesForFrontend()

' Response Construction
CONTROLLER -->> ROUTES : success response with opportunities data
ROUTES -->> API : 200 OK (opportunities data)
API -->> JL : 200 OK (opportunities data)

' Frontend Processing
JL ->> JL : setOpportunities(data.opportunities)
JL ->> JL : setLoading(false)
JL ->> LS : cacheOpportunities(opportunities)
JL ->> ANA : trackEvent('opportunities_loaded')

' Display opportunities
JL ->> U : Render opportunities grid/list

' User interaction - View opportunity details
U ->> JL : Click "View Details" on opportunity
JL ->> JL : handleApply(opportunityId)
JL ->> ANA : trackEvent('opportunity_viewed')
JL ->> U : Show opportunity details modal/alert

' User interaction - Apply to opportunity
U ->> JL : Click "Apply" button
JL ->> JL : handleApply(opportunityId)
JL ->> ANA : trackEvent('opportunity_application')

' Error handling flow
alt Network Error
    API -x JL : Network timeout/error
    JL ->> JL : setError('Error fetching opportunities')
    JL ->> JL : setLoading(false)
    JL ->> U : Show error message with retry button
else Database Error
    CONTROLLER -x DB : Database connection error
    DB -->> CONTROLLER : error response
    CONTROLLER -->> ROUTES : 500 Internal Server Error
    ROUTES -->> API : 500 Internal Server Error
    API -->> JL : 500 Internal Server Error
    JL ->> JL : setError('Failed to fetch opportunities')
    JL ->> JL : setLoading(false)
    JL ->> U : Show error message with retry button
else No Opportunities
    DB -->> CONTROLLER : empty result set
    CONTROLLER ->> CONTROLLER : filterOpenOpportunities([])
    CONTROLLER -->> ROUTES : success response with empty array
    ROUTES -->> API : 200 OK (empty opportunities)
    API -->> JL : 200 OK (empty opportunities)
    JL ->> JL : setOpportunities([])
    JL ->> JL : setLoading(false)
    JL ->> U : Show "No Opportunities Yet" message
end

' Retry functionality
U ->> JL : Click "Try Again" button
JL ->> JL : setError(null)
JL ->> JL : setLoading(true)
JL ->> JL : fetchOpportunities()
note right : Recursive call to initial data loading flow

' Real-time updates (optional)
opt Webhook Integration
    GHL ->> WEBHOOK : POST /api/webhooks/ghl/opportunities-update
    WEBHOOK ->> CONTROLLER : processWebhook(webhookData)
    CONTROLLER ->> DB : updateOpportunity(opportunityData)
    DB -->> CONTROLLER : opportunity updated
    CONTROLLER -->> WEBHOOK : success response
    WEBHOOK -->> GHL : 200 OK
    note right : Opportunity data updated in database\nNext page refresh will show updated data
end

' Data formatting and display
JL ->> JL : formatDate(created_at)
JL ->> JL : formatCurrency(monetary_value)
JL ->> JL : getStatusColor(status)
JL ->> U : Display formatted opportunity cards

' Session persistence
JL ->> LS : saveUserState(currentState)

' Analytics tracking
JL ->> ANA : trackUserJourney(actions)

@enduml 